#!/usr/bin/env Rscript

source("http://bioconductor.org/biocLite.R")
#biocUpgrade()
#biocLite("minfi")
#biocLite("IlluminaHumanMethylation450kanno.ilmn12.hg19")
#biocLite("IlluminaHumanMethylation450kmanifest")
#biocLite("IlluminaHumanMethylationEPICmanifest")
#biocLite("IlluminaHumanMethylationEPICanno.ilm10b2.hg19")
#biocLite("sva")
#biocLite("limma")
library("minfi")
library("IlluminaHumanMethylationEPICmanifest")
library("IlluminaHumanMethylationEPICanno.ilm10b2.hg19")
library("Biobase")
library("RColorBrewer")
library("limma")
library(reshape2)
library(ggplot2)
library(gplots)

###Reading input IDAT SampleSheet###
setwd("C:\\")
baseDir <- getwd()
outDir <- getwd()

##Get IDH mutation status from and the sub-sample sheets for 450k and 850k. You can merge those data as follows with the minfi-package:
targets_450k <- read.metharray.sheet(baseDir, ".csv", recursive=TRUE)
targets_850k <- read.metharray.sheet(baseDir, ".csv", recursive=TRUE)
RGSet_450k <- read.metharray.exp(targets=targets_450k, recursive=TRUE, force=TRUE)
RGSet_850k <- read.metharray.exp(targets=targets_850k, recursive=TRUE, force=TRUE)
# Merge Datasets
RGSet <- combineArrays(RGSet_850k,RGSet_450k,outType="IlluminaHumanMethylation450k")
targets <- read.metharray.sheet(baseDir, ".csv", recursive=TRUE)
rownames(targets) <- targets$Basename
targets <- targets[pData(RGSet)$Basename,]
# The targets object then contains the info for all samples about the mutation status.


###Read IDAT intensity data as RGChannelSet (Red/Green Channel set)
phenoData <- pData(RGSet)
manifest <- getManifest(RGSet)

#####QC and plots####
qcReportpdf = qcReport(RGSet,sampNames = targets$Sample_Name,sampGroups=targets$Sample_Group,pdf="qcReport.pdf")
qcReportpdf

Mset.illumina <- preprocessIllumina(RGSet, bg.correct=TRUE, normalize="controls") ##After Norm
qc <- getQC(Mset.illumina)
png(file=paste(outDir,"/QC.png", sep=""),width=2048,height=2048,pointsize=50)
plotQC(qc)
dev.off()

###Removing poor quality samples###
detP <- detectionP(RGSet)
colnames(detP) <- RGSet$Sample_Group

# examine mean detection p-values across all samples to identify any failed samples
pal <- brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
png(file=paste(outDir,"/pvalue_sample_filter.png", sep=""),width=2048,height=2048,pointsize=70)
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2, 
        cex.names=1, cex.axis=1, names.arg=targets$Sample_Name, ylab="Mean Detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
       bg="white")
dev.off()

# remove poor quality samples
keep <- colMeans(detP) < 0.05
RGSet <- RGSet[,keep]
RGSet

# remove poor quality samples from targets data
targets <- targets[keep,]
detP <- detP[,keep]
dim(detP)
mSetSq <- preprocessQuantile(RGSet)

# ensure probes are in the same order in the mSetSq and detP objects
detP <- detP[match(featureNames(mSetSq),rownames(detP)),] 

# remove any probes that have failed in one or more samples
keep <- rowSums(detP < 0.01) == ncol(mSetSq) 
table(keep)
gset.funnorm <- mSetSq[keep,]
dim(gset.funnorm)

###Normalisation###
gset.funnorm <- addSnpInfo(gset.funnorm) ##add the genomic ranges info to gset
gset.funnorm <- dropLociWithSnps(gset.funnorm,snps=c("SBE", "CpG"), maf=0) ##drop the loci which has snps

###Get annotation###
annot = getAnnotation(gset.funnorm)

###Remove sex probes###
sex_probes = annot$Name[annot$chr %in% c("chrX", "chrY")]
gset.funnorm = gset.funnorm[!(rownames(gset.funnorm) %in% sex_probes),]
dim(gset.funnorm)

###Get beta values to obtain the data matrix###
#gset.funnorm.beta <- getBeta(gset.funnorm)
#colnames(gset.funnorm.beta) <- gset.funnorm$Sample_Group

###Get M values to obtain the data matrix###
gset.funnorm.M <- getM(gset.funnorm)
colnames(gset.funnorm.M) <- gset.funnorm$Sample_Group

#MDSplots
pal <- brewer.pal(8,"Dark2")
png(file=paste(outDir,"/MDSplotWithSampleNames-bypatients.png", sep=""),width=2048,height=2048,pointsize=60)
plotMDS(gset.funnorm.M, top=1000, labels = targets$Sample_Name, gene.selection="common",col=pal[factor(targets$Sample_Group)])
legend("topleft", legend=levels(factor(targets$Sample_Group)), text.col=pal,bg="white", cex=1.2)
dev.off()

pal <- brewer.pal(8,"Dark2")
png(file=paste(outDir,"/MDSplotTop1000.png", sep=""),width=2048,height=2048,pointsize=50)
plotMDS(gset.funnorm.M, top=1000, gene.selection="common",col=pal[factor(targets$Sample_Group)],pch=16)
legend("topleft", legend=levels(factor(targets$Sample_Group)), text.col=pal,bg="white", cex=1.5)
dev.off()

write.csv(gset.funnorm.M,file="M-values.csv") ##write to a csv the beta value datamatrix

###Differential Methylation###
condition <- pData(gset.funnorm)$Sample_Group #provide the sample groups for diff.methylation (if all groups)
dmp <- dmpFinder(gset.funnorm.M, pheno=condition, type="categorical") #run dmp on the data
dmp <- cbind(dmp, ID=rownames(dmp))
#write.csv(dmp,file="differential_methylation.csv")

#annotation <- getAnnotation(RGSet) #get the probe annotation for reference
dmp_annot_combined <- cbind(annot[row.names(dmp),],dmp) #combine the dmp pvalue data with the annotation.
annot<-write.csv(dmp_annot_combined,file="differential_methylation_withAnnotation.csv")

###Plot the heatmap###
cell_colors = colorRampPalette( c("#010F57", "#010F57", "#FAFAFA", "#B21212", "#B21212") )(300)
f <- factor(targets$Sample_Group)
png(file=paste(outDir,"/Heatmap(Top 5000) - IDH Mut, legend bottomright.png", sep=""),width=2050,height=2048,pointsize=50)
heatmap.2(gset.funnorm.M[row.names(dmp[1:5000,]),],trace = 'none',key.title="Methylation", labRow=FALSE, labCol=FALSE, cexCol = 1.2, scale = 'column',col = cell_colors,cexRow = 0.52,key.xlab = "Z-Score",main = "Heatmap (Top 5000)",ColSideColors = pal[factor(targets$Sample_Group)])
legend("bottomright", legend=levels(f), col=pal[factor(levels(f))], pch=15,cex = 0.5)
dev.off()
png(file=paste(outDir,"/Heatmap(Top 10000) - IDH Mut, legend topleft.png", sep=""),width=2050,height=2048,pointsize=50)
heatmap.2(gset.funnorm.M[row.names(dmp[1:10000,]),],trace = 'none',key.title="Methylation", labRow = FALSE, labCol=FALSE, cexCol = 1.2, scale = 'column',col = cell_colors,cexRow = 0.52,key.xlab = "Z-Score",main = "Heatmap (Top 10000)",ColSideColors = pal[factor(targets$Sample_Group)])
legend("topleft", legend=levels(f), col=pal[factor(levels(f))], pch=15,cex = 0.5)
dev.off()

###get methylated and unmethylated signal intensities###
setwd("C:\\")
MSet <- preprocessRaw(RGSet)
MSet
meth_intensities <- getMeth(MSet)
write.csv(meth_intensities, file="meth_intensities.csv")
unmeth_intensities <- getUnmeth(MSet)
write.csv(unmeth_intensities, file="unmeth_intensities.csv")
